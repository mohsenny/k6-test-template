# ðŸ§ª Load Testing

## Installation

When running the tests locally, you need to have a few environmental variables set, as well as having `k6` and the needed NPM modules installed.

To do that, you can set your values for the environmental variables in [local.ps1](./scripts/setup/local.ps1) (for Windows) or in [local.sh](./scripts/setup/local.sh) (for Unix-based OS) and simply source those files depending on your operating sytem:

```powershell
. .\scripts\setup\local.ps1 # For Windows
```
And:
```bash
chmod +x ./scripts/setup/local.sh && source ./scripts/setup/local.sh # For Unix-based OS

```

## Running the tests
Depending on where you like to execute the tests:

```bash
npm run test:local path/to/test # On your local machine
```
or

```bash
npm run test:cloud path/to/test # On k6's cloud dashboard
```
or

```bash
npm run test:ci path/to/test # On CI environment
```

## Developing a new test

### Step 2: Set the Load

You need to add the load for the sanity and performance tests into the [`load.js`](./scenarios/load.js).

The key you use should be the filename, for example `testAbc.js` the key would be `testAbc`.

To find out more information on the options for the load scenarios, please see the [K6 documentation](https://k6.io/docs/using-k6/k6-options/reference/#scenarios).


### Step 2: Define the Endpoints you like to tests

You also should define the endpoints you want to write tests for in [endpoints.js](./helpers/config/endpoints.js)

### Step 3: Defining Request functions for your endpoints

To keep the test logic clean and maintainable you should define the needed requests (`POST`, `GET`, etc.) for the endpoints you are testing under [requests/](./helpers/requests/)

### Step 4: Enforcing additional mandatory Environmental Variable

Check out [configure.js](./helpers/config/configure.js) for setting up rules for mandatory environmental variable to set and present when running your tests.

### Step 5: Template test Example

```js
import { sleep, group } from 'k6';

// Request Helpers
import * as accountsRequests from '../helpers/requests/accounts.js';
import * as contactsRequests from '../helpers/requests/contacts.js';

// Configuration
import { configuration } from '../helpers/config/index.js';
const load = require('../load.js').get(configuration.options.runType);

// K6 Phase Options
export const options = {
  thresholds: {
    http_req_failed: ['rate < 0.01'] /* http errors should be less than 1% */,
    http_req_duration: ['p(95) < 500'] /* 95% of requests should be below 500ms */,
  },
  scenarios: {
    conversations: {
      executor: 'ramping-vus',
      gracefulStop: '30s',
      stages: load.testAbc, // This is where we get the load from what we set in Step 1
      gracefulRampDown: '30s',
    },
  },
};

// Setup
export function setup() {
  // Login as Admin to get a token
  let adminToken = accountsRequests.login(configuration.options.account.email, configuration.options.account.password);
  return { token: adminToken };
}

// Load Testcase
export default function (data) {
  group('Create a Contact', () => {
    contactsRequests.createContact(workspaceID, data.token);
  });
}
```
#### Analysing the report
The test report would look like below:

![Test output](https://github.com/mohsenny/taf-consumer/assets/1129811/d773b8e0-5e18-451c-95bd-88fd92a9330d)


Please check the definitions below to understand each matric:

- `data_received`: The total amount of data received from the target server during the test. It's shown in kilobytes and the rate per second.

- `data_sent`: The total amount of data sent to the target server. This includes all HTTP request data sent by k6.

- `group_duration`: The average, minimum, median, maximum, 90th percentile, and 95th percentile durations of the named groups in your test script. Groups are a way to organize scenarios in k6.

- `http_req_blocked`: The time spent blocked before initiating the request. This can include time spent waiting for a free TCP connection from a connection pool if you're hitting connection limits.

- `http_req_connecting`: The time spent establishing TCP connections to the server. If this is high, it could indicate network issues or server overload.

- `http_req_duration`: The total time for the request. This includes sending time, waiting time, and receiving time. The detailed breakdown is provided for expected responses (expected_response).

- `http_req_failed`: The percentage of failed requests. Ideally, this should be 0%.

- `http_req_receiving`: The time spent receiving the response from the server after the initial request was sent.

- `http_req_sending`: The time spent sending the HTTP request to the server. This typically is a small number.

- `http_req_tls_handshaking`: Time spent performing the TLS handshake. If your request uses HTTPS, this includes the time taken to negotiate the SSL/TLS session.

- `http_req_waiting`: The time spent waiting for a response from the server (also known as Time to First Byte, TTFB). This doesn't include the time taken to download the response body.

- `http_reqs`: The total number of HTTP requests made during the entire test.

- `iteration_duration`: The time it takes to complete one full iteration of the main function in your script.

- `iterations`: The total number of times the main function was executed.

- `vus`: The number of Virtual Users (VUs) actively executing during the current test step.

- `vus_max`: The maximum number of concurrently active VUs during the test.

### Step 6. Cleanup (Optional)

Cleanup scripts are located in [cleaners](./helpers/cleaners/). The purpose of these scripts to manually trigger them either on demand or automatically inside the `tearDown()`.